

/* global showCard Click cont:true */

'use strict';

//declaracion de variables globales

const inputs = document.querySelectorAll('.input_card--radios');
const comenzar = document.querySelector('.start_button');
let resultado = 2;
const trasera = 'https://raw.githubusercontent.com/annabranco/toy-story-games/master/images/cards/cardback.png';
const section = document.querySelector('.card__seccion');
let charactersResults = [];
let charactersShuffled = [];
let notMatchedCards;
let currentPlayer;
let LSData = [];
const NewGame = new Audio('http://freesound.org/data/previews/105/105228_420640-lq.mp3');


function onLoad() {

	preGame();

	window.addEventListener('keyup',(e) => {
		if (e.key === '+') {
			for (const player of LSData) {
				if (LSData[0].currentId === player.id) {

					player.games.total++;
					localStorage.setItem('AB Toy Story Games',JSON.stringify(LSData));
				}
			}
		}
	});
}

function preGame() {
	if (localStorage.getItem('AB Toy Story Games') !== null) {
		LSData = JSON.parse(localStorage.getItem('AB Toy Story Games'));

		const currentPlayerId = LSData[0].currentId;
		for (const player of LSData) {
			if (player.id === currentPlayerId) {
				currentPlayer = player;
			}
		}

		document.querySelector('.player_inner-new').classList.remove('first-game');
		document.querySelector('.player_mainBar').classList.remove('hidden');
		document.querySelector('.player_inner-new').classList.add('hidden');

		setCurrentPlayer();
	} else {
		document.querySelector('.player_inner-new').classList.remove('hidden');
		document.querySelector('.player_outer-edit').classList.remove('hidden');
		document.querySelector('.selection_outer').classList.add('hidden');
	}
}

function setCurrentPlayer() {

	if (currentPlayer !== undefined) {
		const playerNameFields = document.querySelectorAll('.player_name');
		for (const playerName of playerNameFields) {
			playerName.innerHTML = currentPlayer.name;
			document.querySelector('.player_current').id = `player${currentPlayer.id}`;
		}
		const playerAvatars = document.querySelectorAll('.player_avatar');
		for (const playerAvatar of playerAvatars) {
			playerAvatar.src = `images/avatar/${currentPlayer.avatar}.png`;
			playerAvatar.alt = `Avatar de ${currentPlayer.name}`;
		}
	}
}

//identifica el valor del input seleccionado

function buscar() {
	for (let i = 0; i < inputs.length; i++) {
		if (inputs[i].checked) {
			resultado = inputs[i].value;
		}
	}
}
//event listener a los inputs

for (let i = 0; i < inputs.length; i++) {
	inputs[i].addEventListener('click', buscar);
}

//desencadena el juego con un event listener en el boton

comenzar.addEventListener('click', empezar);

//inicia el juego

function empezar() {
	Click.volume = 0.3;
	Click.play();
	//reset

	NewGame.volume = 0.5;
	NewGame.currentTime = 0.5;
	NewGame.play();

	section.innerHTML = '';

	//quito la clase grid que añado al valor 6 del input

	section.classList.remove('grid');

	fetch(
		'https://raw.githubusercontent.com/annabranco/toy-story-games/master/db/' +
		resultado +
		'.json'
	)
		.then(function(respuesta) {
		//me devuelve un objeto y lo pasamos a formato json

			return respuesta.json();
		})
		.then(function(respuesta2) {
			charactersResults = respuesta2;
			shuffleCharacters();
		}
		);
}

// crea un orden aleatorio de los personagens antes de pintar las cartas
function shuffleCharacters() {
	let randomPos = 0;

	while ( charactersResults.length > 0) {
		randomPos = Math.floor((Math.random() * charactersResults.length));
		charactersShuffled.push(charactersResults.splice(randomPos, 1)[0]);
	}
	createElements();
}

function createElements() {

	for (let i = 0; i < charactersShuffled.length; i++) {

		// Genera un número con más de 500 caracteres para desalentar al jugador que quiera buscar los pares en el inspector.
		let pairNumcharactersShuffled[i].pair + '59769375676923883498554014423458721920311835455229438027530024223530866721909462960399550110000006713278418964665445724148575595199604879159308861158527726499409562115837603332783817908611214079685750';

		//let pairNum = charactersShuffled[i].pair;

		const contenedor = document.createElement('div');
		contenedor.setAttribute('data-pair',pairNum);
		contenedor.classList.add('card__div','card__not-matched');
		const imagen = document.createElement('img');
		imagen.classList.add('card__image','card--back');
		const imagen2 = document.createElement('img');
		imagen2.classList.add('card__image', 'card--front');
		const parrafo = document.createElement('p');
		parrafo.classList.add('card_name', 'card--front');
		parrafo.innerHTML=charactersShuffled[i].name;

		const textNotMatch = document.createElement('p');
		textNotMatch.classList.add('card--front','textNotMatch', 'hidden');
		textNotMatch.innerHTML = 'NO SON PAREJA';


		imagen.src = trasera;
		imagen2.src = charactersShuffled[i].image;

		//mejoro la visualizacion con 6 cartas

		if (resultado === '10') {
			section.classList.add('grid10');
		} else {
			section.classList.remove('grid10');
		}

		//añado los elementos al section

		contenedor.append(imagen, imagen2, parrafo, textNotMatch);
		section.appendChild(contenedor);
	}

	prepareCardsToBeClicked();
	// resetea array de personajes reordenados, para prepararlo para otro partido
	charactersShuffled = [];
	document.querySelector('.selection_outer').classList.add('hidden');
}

//event listener a las imagenes

function prepareCardsToBeClicked() {
	notMatchedCards = document.querySelectorAll('.card__not-matched');

	for (let i = 0; i < notMatchedCards.length; i++) {
		notMatchedCards[i].addEventListener('click', showCard);
	}
}

onLoad();

/* exported showCard */
/* global notMatchedCards:true resultado LSData:true currentPlayer */

'use strict';

const contando = document.querySelector('.counter');
let cont = 0;
let compareA;
let compareB;


const Click = new Audio('http://freesound.org/data/previews/215/215772_4027196-lq.mp3');
const Ding = new Audio('http://freesound.org/data/previews/411/411088_5121236-lq.mp3');
const Yes = new Audio('http://freesound.org/data/previews/19/19260_84709-lq.mp3');
const No = new Audio('http://freesound.org/data/previews/273/273919_3173139-lq.mp3');
const Victory = new Audio('http://freesound.org/data/previews/426/426233_321967-lq.mp3');

contando.innerHTML = cont;


//oculta la tarjeta clicada y muestra la otra

function showCard(event) {

	event.currentTarget.classList.toggle('card__turn');
	event.currentTarget.removeEventListener('click', showCard);

	if (compareA === undefined) {
		Ding.volume = 0.3;
		Ding.currentTime = 0;
		Ding.play();
		compareA = event.currentTarget.getAttribute('data-pair');
	} else {
		compareB = event.currentTarget.getAttribute('data-pair');
		compareCards();
	}
}

function compareCards() {
	cont++;
	contando.innerHTML = cont;

	notMatchedCards = document.querySelectorAll('.card__not-matched');
	for (const card of notMatchedCards) {
		card.removeEventListener('click', showCard);
	}

	if (compareA === compareB) {
		Yes.play();
		for (const card of notMatchedCards) {
			if (card.getAttribute('data-pair') === compareA) {
				card.classList.remove('card__not-matched');
			}
		}
		notMatchedCards = document.querySelectorAll('.card__not-matched');
		checkForVictory();
	} else {
		No.volume = 0.3;
		No.currentTime = 0.3;
		No.play();
		for (const card of notMatchedCards) {
			if (card.getAttribute('data-pair') === compareA || card.getAttribute('data-pair') === compareB) {
				card.lastChild.classList.remove('hidden');
				setTimeout(() => {
					card.classList.remove('card__turn');
					card.addEventListener('click', showCard);
					card.lastChild.classList.add('hidden');
					nextTrial();
				},3200);
			}
		}
	}
}

function nextTrial() {
	compareA = compareB = undefined;
	notMatchedCards = document.querySelectorAll('.card__not-matched');
	for (const card of notMatchedCards) {
		card.addEventListener('click', showCard);
	}
}

function checkForVictory() {
	if (notMatchedCards.length === 0) {
		theEnd();
	} else {
		nextTrial();
	}
}

function theEnd() {
	const typeOfGame = `${resultado}char`;
	const numberOfTrials = cont;
	compareA = compareB = undefined;
	cont = 0;
	document.querySelector('.start_button').innerHTML = 'Nuevo partido';

	setTimeout(() => {
		Victory.play();

		const victoryTexts = [`¡Muy bien, ${currentPlayer.name}!`,'¡Has conseguido!','¡Enhorabuena!'];
		const victoryText = victoryTexts[Math.floor(Math.random()*3)];

		const victoryOuter = document.createElement('div');
			victoryOuter.classList.add('victory__outer');

		const victoryInner = document.createElement('h2');
			victoryInner.classList.add('victory__text');
			victoryInner.innerHTML = victoryText;

		victoryOuter.appendChild(victoryInner);

		document.querySelector('.card__seccion').appendChild(victoryOuter);

	},1000);

	setTimeout(() => {
		document.querySelector('.victory__outer').remove();
		document.querySelector('.selection_outer').classList.remove('hidden');
	}, 5000);

	for (const player of LSData) {
		if(player.id === currentPlayer.id) {
			player.games.total++;
			player.games[typeOfGame] = numberOfTrials;
		}
	}
	localStorage.setItem('AB Toy Story Games',JSON.stringify(LSData));
}

/*global LSData currentPlayer:true removePlayer removeButtons:true setCurrentPlayer createNewPlayer Click */
/* exported playerAvatar playerName NewPlayer newPlayerObject */
'use strict';

let playerAvatar;
let playerName;
const NewPlayer = new Audio('http://freesound.org/data/previews/262/262941_2113957-lq.mp3');
const newPlayerObject = {
	id: 0,
	name: '',
	avatar: '',
	games: {
		'2char': undefined,
		'4char': undefined,
		'6char': undefined,
		'8char': undefined,
		'10char': undefined,
		total: 0,
	}
};

document.querySelector('.player_inner-new').addEventListener('click',createNewPlayer);
document.querySelector('.player_details').addEventListener('click',seePlayerDetails);
document.querySelector('.player_change').addEventListener('click',changePlayer);

document.querySelector('.close_details').addEventListener('click',unmountPlayerDetailsMobile);
document.querySelector('.close_change').addEventListener('click',unmountEditPlayersMobile);


function seePlayerDetails() { // Opens up player details screen
	Click.volume = 0.3;
	Click.play();
	document.querySelector('.player_outer-details').classList.remove('hidden');
	document.querySelector('.player_outer-details').addEventListener('mouseleave',unmountPlayerDetails);
	document.querySelector('.trial2').innerHTML = currentPlayer.games['2char'] || '';
	document.querySelector('.trial4').innerHTML = currentPlayer.games['4char'] || '';
	document.querySelector('.trial6').innerHTML = currentPlayer.games['6char'] || '';
	document.querySelector('.trial8').innerHTML = currentPlayer.games['8char'] || '';
	document.querySelector('.trial10').innerHTML = currentPlayer.games['10char'] || '';
	document.querySelector('.record-trials-total').innerHTML = currentPlayer.games.total;
}

function unmountPlayerDetails(e){
	e.currentTarget.classList.add('hidden');
	e.currentTarget.removeEventListener('mouseleave',unmountPlayerDetails);
}

function unmountPlayerDetailsMobile(e){
	e.currentTarget.parentElement.parentElement.classList.add('hidden');
	e.currentTarget.parentElement.parentElement.removeEventListener('mouseleave',unmountPlayerDetails);
}

function changePlayer() {
	Click.volume = 0.3;
	Click.play();
	document.querySelector('.player_outer-edit').classList.remove('hidden');
	document.querySelector('.player_current').classList.remove('hidden');
	document.querySelector('.player_inner-new').classList.remove('hidden');

	printOtherPlayers();

	document.querySelector('.player_outer-edit').addEventListener('mouseleave',unmountEditPlayers);

}

function printOtherPlayers() {
	let LSDataPlayers = [ ... LSData];
	LSDataPlayers.splice(0,1);

	LSDataPlayers = LSDataPlayers.filter(player => player.id !== currentPlayer.id);

	for (const player of LSDataPlayers) {

		const playerOuter = document.createElement('div');
			playerOuter.classList.add('player_inner', 'other_players');
			playerOuter.id = `player${player.id}`;

		const playerContainer = document.createElement('div');
			playerContainer.classList.add('players','other-player-div');

		const avatar = document.createElement('img');
			avatar.src = `images/avatar/${player.avatar}.png`;
			avatar.alt = `Avatar de ${player.name}`;
			avatar.classList.add('otherPlayer_avatar');

		const playerName = document.createElement('h3');
			playerName.classList.add('otherPlayer_name');
			playerName.innerHTML = player.name;

		const icon = document.createElement('i');
			icon.classList.add('fas', 'fa-user-minus', 'player_remove-icon');

		playerContainer.append(avatar, playerName);
		playerOuter.append(playerContainer, icon);
		document.querySelector('.other-players').appendChild(playerOuter);
	}
	const allOtherPlayers = document.querySelectorAll('.other-player-div');
	for (const player of allOtherPlayers) {
		player.addEventListener('click',changeCurrentPlayer);

		removeButtons = document.querySelectorAll('.player_remove-icon');
		for (const button of removeButtons) {
			button.removeEventListener('click', removePlayer);
			button.addEventListener('click', removePlayer);
		}
	}
}

function unmountEditPlayers(e) {
	if ( currentPlayer !== undefined) {
		document.querySelector('.player_inner-new').classList.add('hidden');
	}

	document.querySelector('.player_current').classList.add('hidden');
	e.currentTarget.classList.add('hidden');
	e.currentTarget.removeEventListener('mouseleave',unmountEditPlayers);
	clearOtherPlayers();
}

function unmountEditPlayersMobile(e) {
	if ( currentPlayer !== undefined) {
		document.querySelector('.player_inner-new').classList.add('hidden');
	}

	document.querySelector('.player_current').classList.add('hidden');
	e.currentTarget.parentElement.parentElement.classList.add('hidden');
	e.currentTarget.parentElement.parentElement.removeEventListener('mouseleave',unmountEditPlayers);
	clearOtherPlayers();
}

function clearOtherPlayers() {
	const allOtherPlayers = document.querySelectorAll('.other_players');
	for (const player of allOtherPlayers) {
		player.remove();
	}
}

function changeCurrentPlayer(e) {
	Click.volume = 0.3;
	Click.play();
	let newCurrentCharacterId = e.currentTarget.parentElement.id.substr(6);
	newCurrentCharacterId = Number(newCurrentCharacterId);
	for (const player of LSData) {
		if (player.id === newCurrentCharacterId) {
			currentPlayer = player;
		}
	}
	LSData[0].currentPlayer = currentPlayer.name;
	LSData[0].currentId = currentPlayer.id;

	localStorage.setItem('AB Toy Story Games',JSON.stringify(LSData));

	setCurrentPlayer();
	clearOtherPlayers();
	printOtherPlayers();
}

'use strict';

function createNewPlayer() { // Opens up the screen to create a new player
	document.querySelector('.player_createNew').addEventListener('mouseleave',unmountCreateNewPlayer);
	NewPlayer.currentTime = 0;
	NewPlayer.play();
	document.querySelector('.player_inner-new').classList.remove('first-game');
	document.querySelector('.player_createNew').classList.remove('hidden');
	document.querySelector('.player_createNew-avatarButton').addEventListener('click',addPlayer);
	const avatars = document.querySelectorAll('.avatar');
	for (const avatar of avatars) {
		avatar.addEventListener('click',selectAvatar);
	}
}

function unmountCreateNewPlayer(e) {
	e.currentTarget.classList.add('hidden');
	e.currentTarget.removeEventListener('mouseleave',unmountCreateNewPlayer);

	if (currentPlayer === undefined) {
		document.querySelector('.player_inner-new').classList.add('first-game');
	}
}

function selectAvatar(e) {
	const avatars = document.querySelectorAll('.avatar');
	for (const avatar of avatars) {
		avatar.classList.add('avatar-off');
	}
	e.currentTarget.classList.remove('avatar-off');
	playerAvatar = e.currentTarget.id;
}

function addPlayer() { // Executes when the player creation button CONFIRMAR is clicked

	Click.play();
	let currentId = 0;

	playerName = document.querySelector('.player_createNew-name').value;

	if (playerName === '' || playerAvatar === undefined) {
		document.querySelector('.player_createNew-confirmation').classList.remove('hidden');

	} else {
		if (localStorage.getItem('AB Toy Story Games') !== null) {
			LSData = JSON.parse(localStorage.getItem('AB Toy Story Games'));
			LSData[0].lastId++;
			currentId = LSData[0].lastId; // TODO : change it

		} else {
			currentId = 1;
			LSData.push({ currentPlayer: playerName, currentId: currentId, lastId: currentId });
		}

		const newPlayer = { ...newPlayerObject, id: currentId, name: playerName, avatar: playerAvatar };

		LSData[0].currentPlayer = playerName;
		LSData[0].currentId = currentId;


		LSData.push( newPlayer );

		currentPlayer = newPlayer;

		localStorage.setItem('AB Toy Story Games', JSON.stringify(LSData));


		if ( currentPlayer !== undefined ) {
			document.querySelector('.player_outer-edit').classList.add('hidden');
			document.querySelector('.selection_outer').classList.remove('hidden');
		}

		document.querySelector('.player_createNew').classList.add('hidden');
		document.querySelector('.player_current').classList.remove('hidden');
		document.querySelector('.player_createNew-name').value = '';
		const avatars = document.querySelectorAll('.avatar');
		for (const avatar of avatars) {
			avatar.classList.remove('avatar-off');
		}
		setCurrentPlayer();
		clearOtherPlayers();
		printOtherPlayers();
		document.querySelector('.player_mainBar').classList.remove('hidden');

	}
}

/*global LSData:true currentPlayer:true preGame setCurrentPlayer Click clearOtherPlayers printOtherPlayers*/
'use strict';

let removeButtons = document.querySelectorAll('.player_remove-icon');

for (const button of removeButtons) {
	button.addEventListener('click', removePlayer);
}


function removePlayer(e) {
	Click.volume = 0.3;
	Click.play();

	let clickedPlayerId = e.currentTarget.parentElement.id.substr(6);
	clickedPlayerId = Number(clickedPlayerId);

	for (const player of LSData) {
		if ( player.id  === clickedPlayerId ) {
			if( player.games.total === 0) {
				delPlayer(player.id);
			} else {
				confirmRemovePlayer(player);
			}
		}
	}
}

function confirmRemovePlayer(player) {

	const removeContainer = document.createElement('div');
		removeContainer.classList.add('remove-div');

	const removeInner = document.createElement('div');
		removeInner.classList.add('remove-inner');

	const avatar = document.createElement('img');
		avatar.src = `images/avatar/${player.avatar}.png`;
		avatar.alt = `Avatar de ${player.name}`;
		avatar.classList.add('otherPlayer_avatar');

	const playerName = document.createElement('h3');
		playerName.classList.add('otherPlayer_name');
		playerName.innerHTML = player.name;

	const removeWarningTitle = document.createElement('h4');
		removeWarningTitle.classList.add('remove_warning-title');
		removeWarningTitle.innerHTML = '¡Importante!';

	const removeWarning = document.createElement('p');
		removeWarning.classList.add('remove_warning-txt');
		removeWarning.innerHTML = `El registro de ${player.name} y todo su historial será PERMANENTEMENTE borrado.`;

	const removeWarning2 = document.createElement('p');
		removeWarning2.classList.add('remove_warning-txt');
		removeWarning2.innerHTML = `Esta acción no podrá ser deshecha. ¿Deseas realmente continuar?`;

	const removeButton1 = document.createElement('button');
		removeButton1.classList.add('remove_button','remove_button-cancel');
		removeButton1.innerHTML = 'Cancelar';
		removeButton1.addEventListener('click', () => delPlayer('cancel'));

	const removeButton2 = document.createElement('button');
		removeButton2.classList.add('remove_button','remove_button-delete');
		removeButton2.innerHTML = `Borrar ${player.name}`;
		removeButton2.addEventListener('click', () => delPlayer(player.id));


	removeInner.append(avatar, playerName);
	removeContainer.append(removeWarningTitle, removeInner, removeWarning, removeWarning2, removeButton1, removeButton2);

	document.querySelector('.player').appendChild(removeContainer);
}

function delPlayer(id) {
	if (id === 'cancel') {
		document.querySelector('.remove-div').remove();

	} else {
		for ( let i = 0; i < LSData.length; i++ ) {
			if (LSData[i].id === id) {
				if (LSData[i].id === currentPlayer.id) {

					forcedChangeCurrentPlayer(LSData[i].id, i);
				}
				LSData.splice(i,1);
				if (LSData.length === 1) {
					localStorage.removeItem('AB Toy Story Games');
					LSData = [];
				} else {
					localStorage.setItem('AB Toy Story Games',JSON.stringify(LSData));
				}

				document.querySelector('.remove-div') ? document.querySelector('.remove-div').remove() : null;
			}
		}
		if ( currentPlayer === undefined ) {
			preGame();
		}
		setCurrentPlayer();
	}
}


function forcedChangeCurrentPlayer(id, orderOfDeletedPlayer) {
	let playersLSData = [ ...LSData]; // creates a copy of LSData to handle players without messign the original array
	playersLSData.splice(orderOfDeletedPlayer,1); // removes deleted player from array
	playersLSData.splice(0,1); // removes currentPlayer object, so we have only players objects on array
	if (playersLSData.length === 0) { // If there are no players left after removing the deleted one
		currentPlayer = undefined;
		document.querySelector('.player_current').classList.add('hidden');
		document.querySelector('.player_inner-new').classList.add('first-game');
		document.querySelector('.player_outer-edit').removeEventListener('mouseleave',unmountEditPlayers);
	} else {
		currentPlayer = playersLSData[0];
		LSData[0].currentPlayer = currentPlayer.name;
		LSData[0].currentId = currentPlayer.id;
	}
}

//# sourceMappingURL=main.min.js.map
